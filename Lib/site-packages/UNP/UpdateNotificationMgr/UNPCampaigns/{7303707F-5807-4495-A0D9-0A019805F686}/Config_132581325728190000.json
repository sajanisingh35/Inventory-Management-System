{"ACTIONS":[{"ActionType":"RunDetectorAction","CompletedSubKey":"SOFTWARE\\Microsoft\\UNP\\Detector\\{7303707F-5807-4495-A0D9-0A019805F686}\\State","CompletedValue":"PreDetectionComplete","DetectorXmlKey":"PREDETECTIONDETECTOR","SubState":"PreDetectionRunning"},{"ActionType":"DownloadContentAction","ContentUrl":"http://dl.delivery.mp.microsoft.com/filestreamingservice/files/d347e6f6-2a2e-4fd4-8b4c-5c55ca3722a6/MUSE-19H1_Compat_DPA.cab","SubState":"DownloadContentStaged"},{"ActionType":"PauseAction","CompletedSubKey":"SOFTWARE\\Microsoft\\UNP\\Detector\\{7303707F-5807-4495-A0D9-0A019805F686}\\State","CompletedValue":"EndPause","SubState":"WaitingToCleanUp"}],"ALLOWEDMANAGEDSCENARIOS":{"CurrentUserAADJ":"Yes","DomainJoined":"Yes","MDM":"Yes","MachineAADJ":"Yes","RetailDemo":"Yes","SCCM":"Yes"},"CAMPAIGNEXPIREDATE":"2025-12-31T11:59:59Z","CAMPAIGNPAUSED":"No","CAMPAIGNTIMETOGOLIVE":"2017-02-02T12:00:00Z","PREDETECTIONDETECTOR":"","REVISION":"2"}